// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class ApprovalForAll extends ethereum.Event {
  get params(): ApprovalForAll__Params {
    return new ApprovalForAll__Params(this);
  }
}

export class ApprovalForAll__Params {
  _event: ApprovalForAll;

  constructor(event: ApprovalForAll) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get operator(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get approved(): boolean {
    return this._event.parameters[2].value.toBoolean();
  }
}

export class DefaultRoyalty extends ethereum.Event {
  get params(): DefaultRoyalty__Params {
    return new DefaultRoyalty__Params(this);
  }
}

export class DefaultRoyalty__Params {
  _event: DefaultRoyalty;

  constructor(event: DefaultRoyalty) {
    this._event = event;
  }

  get newRoyaltyRecipient(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newRoyaltyBps(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class OwnerUpdated extends ethereum.Event {
  get params(): OwnerUpdated__Params {
    return new OwnerUpdated__Params(this);
  }
}

export class OwnerUpdated__Params {
  _event: OwnerUpdated;

  constructor(event: OwnerUpdated) {
    this._event = event;
  }

  get prevOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class PlatformFeeInfoUpdated extends ethereum.Event {
  get params(): PlatformFeeInfoUpdated__Params {
    return new PlatformFeeInfoUpdated__Params(this);
  }
}

export class PlatformFeeInfoUpdated__Params {
  _event: PlatformFeeInfoUpdated;

  constructor(event: PlatformFeeInfoUpdated) {
    this._event = event;
  }

  get platformFeeRecipient(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get platformFeeBps(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class PrimarySaleRecipientUpdated extends ethereum.Event {
  get params(): PrimarySaleRecipientUpdated__Params {
    return new PrimarySaleRecipientUpdated__Params(this);
  }
}

export class PrimarySaleRecipientUpdated__Params {
  _event: PrimarySaleRecipientUpdated;

  constructor(event: PrimarySaleRecipientUpdated) {
    this._event = event;
  }

  get recipient(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class RoleAdminChanged extends ethereum.Event {
  get params(): RoleAdminChanged__Params {
    return new RoleAdminChanged__Params(this);
  }
}

export class RoleAdminChanged__Params {
  _event: RoleAdminChanged;

  constructor(event: RoleAdminChanged) {
    this._event = event;
  }

  get role(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get previousAdminRole(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }

  get newAdminRole(): Bytes {
    return this._event.parameters[2].value.toBytes();
  }
}

export class RoleGranted extends ethereum.Event {
  get params(): RoleGranted__Params {
    return new RoleGranted__Params(this);
  }
}

export class RoleGranted__Params {
  _event: RoleGranted;

  constructor(event: RoleGranted) {
    this._event = event;
  }

  get role(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get account(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get sender(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class RoleRevoked extends ethereum.Event {
  get params(): RoleRevoked__Params {
    return new RoleRevoked__Params(this);
  }
}

export class RoleRevoked__Params {
  _event: RoleRevoked;

  constructor(event: RoleRevoked) {
    this._event = event;
  }

  get role(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get account(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get sender(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class RoyaltyForToken extends ethereum.Event {
  get params(): RoyaltyForToken__Params {
    return new RoyaltyForToken__Params(this);
  }
}

export class RoyaltyForToken__Params {
  _event: RoyaltyForToken;

  constructor(event: RoyaltyForToken) {
    this._event = event;
  }

  get tokenId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get royaltyRecipient(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get royaltyBps(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class TokensMinted extends ethereum.Event {
  get params(): TokensMinted__Params {
    return new TokensMinted__Params(this);
  }
}

export class TokensMinted__Params {
  _event: TokensMinted;

  constructor(event: TokensMinted) {
    this._event = event;
  }

  get mintedTo(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get tokenIdMinted(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get uri(): string {
    return this._event.parameters[2].value.toString();
  }

  get quantityMinted(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class TokensMintedWithSignature extends ethereum.Event {
  get params(): TokensMintedWithSignature__Params {
    return new TokensMintedWithSignature__Params(this);
  }
}

export class TokensMintedWithSignature__Params {
  _event: TokensMintedWithSignature;

  constructor(event: TokensMintedWithSignature) {
    this._event = event;
  }

  get signer(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get mintedTo(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenIdMinted(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get mintRequest(): TokensMintedWithSignatureMintRequestStruct {
    return changetype<TokensMintedWithSignatureMintRequestStruct>(
      this._event.parameters[3].value.toTuple()
    );
  }
}

export class TokensMintedWithSignatureMintRequestStruct extends ethereum.Tuple {
  get to(): Address {
    return this[0].toAddress();
  }

  get royaltyRecipient(): Address {
    return this[1].toAddress();
  }

  get royaltyBps(): BigInt {
    return this[2].toBigInt();
  }

  get primarySaleRecipient(): Address {
    return this[3].toAddress();
  }

  get tokenId(): BigInt {
    return this[4].toBigInt();
  }

  get uri(): string {
    return this[5].toString();
  }

  get quantity(): BigInt {
    return this[6].toBigInt();
  }

  get pricePerToken(): BigInt {
    return this[7].toBigInt();
  }

  get currency(): Address {
    return this[8].toAddress();
  }

  get validityStartTimestamp(): BigInt {
    return this[9].toBigInt();
  }

  get validityEndTimestamp(): BigInt {
    return this[10].toBigInt();
  }

  get uid(): Bytes {
    return this[11].toBytes();
  }
}

export class TransferBatch extends ethereum.Event {
  get params(): TransferBatch__Params {
    return new TransferBatch__Params(this);
  }
}

export class TransferBatch__Params {
  _event: TransferBatch;

  constructor(event: TransferBatch) {
    this._event = event;
  }

  get operator(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get from(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get ids(): Array<BigInt> {
    return this._event.parameters[3].value.toBigIntArray();
  }

  get values(): Array<BigInt> {
    return this._event.parameters[4].value.toBigIntArray();
  }
}

export class TransferSingle extends ethereum.Event {
  get params(): TransferSingle__Params {
    return new TransferSingle__Params(this);
  }
}

export class TransferSingle__Params {
  _event: TransferSingle;

  constructor(event: TransferSingle) {
    this._event = event;
  }

  get operator(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get from(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get id(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get value(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class URI extends ethereum.Event {
  get params(): URI__Params {
    return new URI__Params(this);
  }
}

export class URI__Params {
  _event: URI;

  constructor(event: URI) {
    this._event = event;
  }

  get value(): string {
    return this._event.parameters[0].value.toString();
  }

  get id(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class InstigatorsNFT__getDefaultRoyaltyInfoResult {
  value0: Address;
  value1: i32;

  constructor(value0: Address, value1: i32) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set(
      "value1",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value1))
    );
    return map;
  }

  getValue0(): Address {
    return this.value0;
  }

  getValue1(): i32 {
    return this.value1;
  }
}

export class InstigatorsNFT__getPlatformFeeInfoResult {
  value0: Address;
  value1: i32;

  constructor(value0: Address, value1: i32) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set(
      "value1",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value1))
    );
    return map;
  }

  getValue0(): Address {
    return this.value0;
  }

  getValue1(): i32 {
    return this.value1;
  }
}

export class InstigatorsNFT__getRoyaltyInfoForTokenResult {
  value0: Address;
  value1: i32;

  constructor(value0: Address, value1: i32) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set(
      "value1",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value1))
    );
    return map;
  }

  getValue0(): Address {
    return this.value0;
  }

  getValue1(): i32 {
    return this.value1;
  }
}

export class InstigatorsNFT__royaltyInfoResult {
  value0: Address;
  value1: BigInt;

  constructor(value0: Address, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  getReceiver(): Address {
    return this.value0;
  }

  getRoyaltyAmount(): BigInt {
    return this.value1;
  }
}

export class InstigatorsNFT__verifyResult {
  value0: boolean;
  value1: Address;

  constructor(value0: boolean, value1: Address) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromBoolean(this.value0));
    map.set("value1", ethereum.Value.fromAddress(this.value1));
    return map;
  }

  getValue0(): boolean {
    return this.value0;
  }

  getValue1(): Address {
    return this.value1;
  }
}

export class InstigatorsNFT__verifyInput_reqStruct extends ethereum.Tuple {
  get to(): Address {
    return this[0].toAddress();
  }

  get royaltyRecipient(): Address {
    return this[1].toAddress();
  }

  get royaltyBps(): BigInt {
    return this[2].toBigInt();
  }

  get primarySaleRecipient(): Address {
    return this[3].toAddress();
  }

  get tokenId(): BigInt {
    return this[4].toBigInt();
  }

  get uri(): string {
    return this[5].toString();
  }

  get quantity(): BigInt {
    return this[6].toBigInt();
  }

  get pricePerToken(): BigInt {
    return this[7].toBigInt();
  }

  get currency(): Address {
    return this[8].toAddress();
  }

  get validityStartTimestamp(): BigInt {
    return this[9].toBigInt();
  }

  get validityEndTimestamp(): BigInt {
    return this[10].toBigInt();
  }

  get uid(): Bytes {
    return this[11].toBytes();
  }
}

export class InstigatorsNFT extends ethereum.SmartContract {
  static bind(address: Address): InstigatorsNFT {
    return new InstigatorsNFT("InstigatorsNFT", address);
  }

  DEFAULT_ADMIN_ROLE(): Bytes {
    let result = super.call(
      "DEFAULT_ADMIN_ROLE",
      "DEFAULT_ADMIN_ROLE():(bytes32)",
      []
    );

    return result[0].toBytes();
  }

  try_DEFAULT_ADMIN_ROLE(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "DEFAULT_ADMIN_ROLE",
      "DEFAULT_ADMIN_ROLE():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  balanceOf(account: Address, id: BigInt): BigInt {
    let result = super.call(
      "balanceOf",
      "balanceOf(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(account),
        ethereum.Value.fromUnsignedBigInt(id)
      ]
    );

    return result[0].toBigInt();
  }

  try_balanceOf(account: Address, id: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "balanceOf",
      "balanceOf(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(account),
        ethereum.Value.fromUnsignedBigInt(id)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  balanceOfBatch(accounts: Array<Address>, ids: Array<BigInt>): Array<BigInt> {
    let result = super.call(
      "balanceOfBatch",
      "balanceOfBatch(address[],uint256[]):(uint256[])",
      [
        ethereum.Value.fromAddressArray(accounts),
        ethereum.Value.fromUnsignedBigIntArray(ids)
      ]
    );

    return result[0].toBigIntArray();
  }

  try_balanceOfBatch(
    accounts: Array<Address>,
    ids: Array<BigInt>
  ): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      "balanceOfBatch",
      "balanceOfBatch(address[],uint256[]):(uint256[])",
      [
        ethereum.Value.fromAddressArray(accounts),
        ethereum.Value.fromUnsignedBigIntArray(ids)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  contractType(): Bytes {
    let result = super.call("contractType", "contractType():(bytes32)", []);

    return result[0].toBytes();
  }

  try_contractType(): ethereum.CallResult<Bytes> {
    let result = super.tryCall("contractType", "contractType():(bytes32)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  contractURI(): string {
    let result = super.call("contractURI", "contractURI():(string)", []);

    return result[0].toString();
  }

  try_contractURI(): ethereum.CallResult<string> {
    let result = super.tryCall("contractURI", "contractURI():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  contractVersion(): i32 {
    let result = super.call("contractVersion", "contractVersion():(uint8)", []);

    return result[0].toI32();
  }

  try_contractVersion(): ethereum.CallResult<i32> {
    let result = super.tryCall(
      "contractVersion",
      "contractVersion():(uint8)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  getDefaultRoyaltyInfo(): InstigatorsNFT__getDefaultRoyaltyInfoResult {
    let result = super.call(
      "getDefaultRoyaltyInfo",
      "getDefaultRoyaltyInfo():(address,uint16)",
      []
    );

    return new InstigatorsNFT__getDefaultRoyaltyInfoResult(
      result[0].toAddress(),
      result[1].toI32()
    );
  }

  try_getDefaultRoyaltyInfo(): ethereum.CallResult<
    InstigatorsNFT__getDefaultRoyaltyInfoResult
  > {
    let result = super.tryCall(
      "getDefaultRoyaltyInfo",
      "getDefaultRoyaltyInfo():(address,uint16)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new InstigatorsNFT__getDefaultRoyaltyInfoResult(
        value[0].toAddress(),
        value[1].toI32()
      )
    );
  }

  getPlatformFeeInfo(): InstigatorsNFT__getPlatformFeeInfoResult {
    let result = super.call(
      "getPlatformFeeInfo",
      "getPlatformFeeInfo():(address,uint16)",
      []
    );

    return new InstigatorsNFT__getPlatformFeeInfoResult(
      result[0].toAddress(),
      result[1].toI32()
    );
  }

  try_getPlatformFeeInfo(): ethereum.CallResult<
    InstigatorsNFT__getPlatformFeeInfoResult
  > {
    let result = super.tryCall(
      "getPlatformFeeInfo",
      "getPlatformFeeInfo():(address,uint16)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new InstigatorsNFT__getPlatformFeeInfoResult(
        value[0].toAddress(),
        value[1].toI32()
      )
    );
  }

  getRoleAdmin(role: Bytes): Bytes {
    let result = super.call("getRoleAdmin", "getRoleAdmin(bytes32):(bytes32)", [
      ethereum.Value.fromFixedBytes(role)
    ]);

    return result[0].toBytes();
  }

  try_getRoleAdmin(role: Bytes): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "getRoleAdmin",
      "getRoleAdmin(bytes32):(bytes32)",
      [ethereum.Value.fromFixedBytes(role)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  getRoleMember(role: Bytes, index: BigInt): Address {
    let result = super.call(
      "getRoleMember",
      "getRoleMember(bytes32,uint256):(address)",
      [
        ethereum.Value.fromFixedBytes(role),
        ethereum.Value.fromUnsignedBigInt(index)
      ]
    );

    return result[0].toAddress();
  }

  try_getRoleMember(role: Bytes, index: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getRoleMember",
      "getRoleMember(bytes32,uint256):(address)",
      [
        ethereum.Value.fromFixedBytes(role),
        ethereum.Value.fromUnsignedBigInt(index)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getRoleMemberCount(role: Bytes): BigInt {
    let result = super.call(
      "getRoleMemberCount",
      "getRoleMemberCount(bytes32):(uint256)",
      [ethereum.Value.fromFixedBytes(role)]
    );

    return result[0].toBigInt();
  }

  try_getRoleMemberCount(role: Bytes): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getRoleMemberCount",
      "getRoleMemberCount(bytes32):(uint256)",
      [ethereum.Value.fromFixedBytes(role)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getRoyaltyInfoForToken(
    _tokenId: BigInt
  ): InstigatorsNFT__getRoyaltyInfoForTokenResult {
    let result = super.call(
      "getRoyaltyInfoForToken",
      "getRoyaltyInfoForToken(uint256):(address,uint16)",
      [ethereum.Value.fromUnsignedBigInt(_tokenId)]
    );

    return new InstigatorsNFT__getRoyaltyInfoForTokenResult(
      result[0].toAddress(),
      result[1].toI32()
    );
  }

  try_getRoyaltyInfoForToken(
    _tokenId: BigInt
  ): ethereum.CallResult<InstigatorsNFT__getRoyaltyInfoForTokenResult> {
    let result = super.tryCall(
      "getRoyaltyInfoForToken",
      "getRoyaltyInfoForToken(uint256):(address,uint16)",
      [ethereum.Value.fromUnsignedBigInt(_tokenId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new InstigatorsNFT__getRoyaltyInfoForTokenResult(
        value[0].toAddress(),
        value[1].toI32()
      )
    );
  }

  hasRole(role: Bytes, account: Address): boolean {
    let result = super.call("hasRole", "hasRole(bytes32,address):(bool)", [
      ethereum.Value.fromFixedBytes(role),
      ethereum.Value.fromAddress(account)
    ]);

    return result[0].toBoolean();
  }

  try_hasRole(role: Bytes, account: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("hasRole", "hasRole(bytes32,address):(bool)", [
      ethereum.Value.fromFixedBytes(role),
      ethereum.Value.fromAddress(account)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isApprovedForAll(account: Address, operator: Address): boolean {
    let result = super.call(
      "isApprovedForAll",
      "isApprovedForAll(address,address):(bool)",
      [
        ethereum.Value.fromAddress(account),
        ethereum.Value.fromAddress(operator)
      ]
    );

    return result[0].toBoolean();
  }

  try_isApprovedForAll(
    account: Address,
    operator: Address
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isApprovedForAll",
      "isApprovedForAll(address,address):(bool)",
      [
        ethereum.Value.fromAddress(account),
        ethereum.Value.fromAddress(operator)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isTrustedForwarder(forwarder: Address): boolean {
    let result = super.call(
      "isTrustedForwarder",
      "isTrustedForwarder(address):(bool)",
      [ethereum.Value.fromAddress(forwarder)]
    );

    return result[0].toBoolean();
  }

  try_isTrustedForwarder(forwarder: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isTrustedForwarder",
      "isTrustedForwarder(address):(bool)",
      [ethereum.Value.fromAddress(forwarder)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  multicall(data: Array<Bytes>): Array<Bytes> {
    let result = super.call("multicall", "multicall(bytes[]):(bytes[])", [
      ethereum.Value.fromBytesArray(data)
    ]);

    return result[0].toBytesArray();
  }

  try_multicall(data: Array<Bytes>): ethereum.CallResult<Array<Bytes>> {
    let result = super.tryCall("multicall", "multicall(bytes[]):(bytes[])", [
      ethereum.Value.fromBytesArray(data)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytesArray());
  }

  name(): string {
    let result = super.call("name", "name():(string)", []);

    return result[0].toString();
  }

  try_name(): ethereum.CallResult<string> {
    let result = super.tryCall("name", "name():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  nextTokenIdToMint(): BigInt {
    let result = super.call(
      "nextTokenIdToMint",
      "nextTokenIdToMint():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_nextTokenIdToMint(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "nextTokenIdToMint",
      "nextTokenIdToMint():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  platformFeeBps(): BigInt {
    let result = super.call("platformFeeBps", "platformFeeBps():(uint128)", []);

    return result[0].toBigInt();
  }

  try_platformFeeBps(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "platformFeeBps",
      "platformFeeBps():(uint128)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  platformFeeRecipient(): Address {
    let result = super.call(
      "platformFeeRecipient",
      "platformFeeRecipient():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_platformFeeRecipient(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "platformFeeRecipient",
      "platformFeeRecipient():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  primarySaleRecipient(): Address {
    let result = super.call(
      "primarySaleRecipient",
      "primarySaleRecipient():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_primarySaleRecipient(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "primarySaleRecipient",
      "primarySaleRecipient():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  royaltyInfo(
    tokenId: BigInt,
    salePrice: BigInt
  ): InstigatorsNFT__royaltyInfoResult {
    let result = super.call(
      "royaltyInfo",
      "royaltyInfo(uint256,uint256):(address,uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(tokenId),
        ethereum.Value.fromUnsignedBigInt(salePrice)
      ]
    );

    return new InstigatorsNFT__royaltyInfoResult(
      result[0].toAddress(),
      result[1].toBigInt()
    );
  }

  try_royaltyInfo(
    tokenId: BigInt,
    salePrice: BigInt
  ): ethereum.CallResult<InstigatorsNFT__royaltyInfoResult> {
    let result = super.tryCall(
      "royaltyInfo",
      "royaltyInfo(uint256,uint256):(address,uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(tokenId),
        ethereum.Value.fromUnsignedBigInt(salePrice)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new InstigatorsNFT__royaltyInfoResult(
        value[0].toAddress(),
        value[1].toBigInt()
      )
    );
  }

  saleRecipientForToken(param0: BigInt): Address {
    let result = super.call(
      "saleRecipientForToken",
      "saleRecipientForToken(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return result[0].toAddress();
  }

  try_saleRecipientForToken(param0: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "saleRecipientForToken",
      "saleRecipientForToken(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  supportsInterface(interfaceId: Bytes): boolean {
    let result = super.call(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );

    return result[0].toBoolean();
  }

  try_supportsInterface(interfaceId: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  symbol(): string {
    let result = super.call("symbol", "symbol():(string)", []);

    return result[0].toString();
  }

  try_symbol(): ethereum.CallResult<string> {
    let result = super.tryCall("symbol", "symbol():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  thirdwebFee(): Address {
    let result = super.call("thirdwebFee", "thirdwebFee():(address)", []);

    return result[0].toAddress();
  }

  try_thirdwebFee(): ethereum.CallResult<Address> {
    let result = super.tryCall("thirdwebFee", "thirdwebFee():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  totalSupply(param0: BigInt): BigInt {
    let result = super.call("totalSupply", "totalSupply(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);

    return result[0].toBigInt();
  }

  try_totalSupply(param0: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "totalSupply",
      "totalSupply(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  uri(_tokenId: BigInt): string {
    let result = super.call("uri", "uri(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(_tokenId)
    ]);

    return result[0].toString();
  }

  try_uri(_tokenId: BigInt): ethereum.CallResult<string> {
    let result = super.tryCall("uri", "uri(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(_tokenId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  verify(
    _req: InstigatorsNFT__verifyInput_reqStruct,
    _signature: Bytes
  ): InstigatorsNFT__verifyResult {
    let result = super.call(
      "verify",
      "verify((address,address,uint256,address,uint256,string,uint256,uint256,address,uint128,uint128,bytes32),bytes):(bool,address)",
      [ethereum.Value.fromTuple(_req), ethereum.Value.fromBytes(_signature)]
    );

    return new InstigatorsNFT__verifyResult(
      result[0].toBoolean(),
      result[1].toAddress()
    );
  }

  try_verify(
    _req: InstigatorsNFT__verifyInput_reqStruct,
    _signature: Bytes
  ): ethereum.CallResult<InstigatorsNFT__verifyResult> {
    let result = super.tryCall(
      "verify",
      "verify((address,address,uint256,address,uint256,string,uint256,uint256,address,uint128,uint128,bytes32),bytes):(bool,address)",
      [ethereum.Value.fromTuple(_req), ethereum.Value.fromBytes(_signature)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new InstigatorsNFT__verifyResult(
        value[0].toBoolean(),
        value[1].toAddress()
      )
    );
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _thirdwebFee(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class BurnCall extends ethereum.Call {
  get inputs(): BurnCall__Inputs {
    return new BurnCall__Inputs(this);
  }

  get outputs(): BurnCall__Outputs {
    return new BurnCall__Outputs(this);
  }
}

export class BurnCall__Inputs {
  _call: BurnCall;

  constructor(call: BurnCall) {
    this._call = call;
  }

  get account(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get id(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get value(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class BurnCall__Outputs {
  _call: BurnCall;

  constructor(call: BurnCall) {
    this._call = call;
  }
}

export class BurnBatchCall extends ethereum.Call {
  get inputs(): BurnBatchCall__Inputs {
    return new BurnBatchCall__Inputs(this);
  }

  get outputs(): BurnBatchCall__Outputs {
    return new BurnBatchCall__Outputs(this);
  }
}

export class BurnBatchCall__Inputs {
  _call: BurnBatchCall;

  constructor(call: BurnBatchCall) {
    this._call = call;
  }

  get account(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get ids(): Array<BigInt> {
    return this._call.inputValues[1].value.toBigIntArray();
  }

  get values(): Array<BigInt> {
    return this._call.inputValues[2].value.toBigIntArray();
  }
}

export class BurnBatchCall__Outputs {
  _call: BurnBatchCall;

  constructor(call: BurnBatchCall) {
    this._call = call;
  }
}

export class GrantRoleCall extends ethereum.Call {
  get inputs(): GrantRoleCall__Inputs {
    return new GrantRoleCall__Inputs(this);
  }

  get outputs(): GrantRoleCall__Outputs {
    return new GrantRoleCall__Outputs(this);
  }
}

export class GrantRoleCall__Inputs {
  _call: GrantRoleCall;

  constructor(call: GrantRoleCall) {
    this._call = call;
  }

  get role(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get account(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class GrantRoleCall__Outputs {
  _call: GrantRoleCall;

  constructor(call: GrantRoleCall) {
    this._call = call;
  }
}

export class InitializeCall extends ethereum.Call {
  get inputs(): InitializeCall__Inputs {
    return new InitializeCall__Inputs(this);
  }

  get outputs(): InitializeCall__Outputs {
    return new InitializeCall__Outputs(this);
  }
}

export class InitializeCall__Inputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }

  get _defaultAdmin(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _name(): string {
    return this._call.inputValues[1].value.toString();
  }

  get _symbol(): string {
    return this._call.inputValues[2].value.toString();
  }

  get _contractURI(): string {
    return this._call.inputValues[3].value.toString();
  }

  get _trustedForwarders(): Array<Address> {
    return this._call.inputValues[4].value.toAddressArray();
  }

  get _primarySaleRecipient(): Address {
    return this._call.inputValues[5].value.toAddress();
  }

  get _royaltyRecipient(): Address {
    return this._call.inputValues[6].value.toAddress();
  }

  get _royaltyBps(): BigInt {
    return this._call.inputValues[7].value.toBigInt();
  }

  get _platformFeeBps(): BigInt {
    return this._call.inputValues[8].value.toBigInt();
  }

  get _platformFeeRecipient(): Address {
    return this._call.inputValues[9].value.toAddress();
  }
}

export class InitializeCall__Outputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }
}

export class MintToCall extends ethereum.Call {
  get inputs(): MintToCall__Inputs {
    return new MintToCall__Inputs(this);
  }

  get outputs(): MintToCall__Outputs {
    return new MintToCall__Outputs(this);
  }
}

export class MintToCall__Inputs {
  _call: MintToCall;

  constructor(call: MintToCall) {
    this._call = call;
  }

  get _to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _tokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _uri(): string {
    return this._call.inputValues[2].value.toString();
  }

  get _amount(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }
}

export class MintToCall__Outputs {
  _call: MintToCall;

  constructor(call: MintToCall) {
    this._call = call;
  }
}

export class MintWithSignatureCall extends ethereum.Call {
  get inputs(): MintWithSignatureCall__Inputs {
    return new MintWithSignatureCall__Inputs(this);
  }

  get outputs(): MintWithSignatureCall__Outputs {
    return new MintWithSignatureCall__Outputs(this);
  }
}

export class MintWithSignatureCall__Inputs {
  _call: MintWithSignatureCall;

  constructor(call: MintWithSignatureCall) {
    this._call = call;
  }

  get _req(): MintWithSignatureCall_reqStruct {
    return changetype<MintWithSignatureCall_reqStruct>(
      this._call.inputValues[0].value.toTuple()
    );
  }

  get _signature(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }
}

export class MintWithSignatureCall__Outputs {
  _call: MintWithSignatureCall;

  constructor(call: MintWithSignatureCall) {
    this._call = call;
  }
}

export class MintWithSignatureCall_reqStruct extends ethereum.Tuple {
  get to(): Address {
    return this[0].toAddress();
  }

  get royaltyRecipient(): Address {
    return this[1].toAddress();
  }

  get royaltyBps(): BigInt {
    return this[2].toBigInt();
  }

  get primarySaleRecipient(): Address {
    return this[3].toAddress();
  }

  get tokenId(): BigInt {
    return this[4].toBigInt();
  }

  get uri(): string {
    return this[5].toString();
  }

  get quantity(): BigInt {
    return this[6].toBigInt();
  }

  get pricePerToken(): BigInt {
    return this[7].toBigInt();
  }

  get currency(): Address {
    return this[8].toAddress();
  }

  get validityStartTimestamp(): BigInt {
    return this[9].toBigInt();
  }

  get validityEndTimestamp(): BigInt {
    return this[10].toBigInt();
  }

  get uid(): Bytes {
    return this[11].toBytes();
  }
}

export class MulticallCall extends ethereum.Call {
  get inputs(): MulticallCall__Inputs {
    return new MulticallCall__Inputs(this);
  }

  get outputs(): MulticallCall__Outputs {
    return new MulticallCall__Outputs(this);
  }
}

export class MulticallCall__Inputs {
  _call: MulticallCall;

  constructor(call: MulticallCall) {
    this._call = call;
  }

  get data(): Array<Bytes> {
    return this._call.inputValues[0].value.toBytesArray();
  }
}

export class MulticallCall__Outputs {
  _call: MulticallCall;

  constructor(call: MulticallCall) {
    this._call = call;
  }

  get results(): Array<Bytes> {
    return this._call.outputValues[0].value.toBytesArray();
  }
}

export class RenounceRoleCall extends ethereum.Call {
  get inputs(): RenounceRoleCall__Inputs {
    return new RenounceRoleCall__Inputs(this);
  }

  get outputs(): RenounceRoleCall__Outputs {
    return new RenounceRoleCall__Outputs(this);
  }
}

export class RenounceRoleCall__Inputs {
  _call: RenounceRoleCall;

  constructor(call: RenounceRoleCall) {
    this._call = call;
  }

  get role(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get account(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class RenounceRoleCall__Outputs {
  _call: RenounceRoleCall;

  constructor(call: RenounceRoleCall) {
    this._call = call;
  }
}

export class RevokeRoleCall extends ethereum.Call {
  get inputs(): RevokeRoleCall__Inputs {
    return new RevokeRoleCall__Inputs(this);
  }

  get outputs(): RevokeRoleCall__Outputs {
    return new RevokeRoleCall__Outputs(this);
  }
}

export class RevokeRoleCall__Inputs {
  _call: RevokeRoleCall;

  constructor(call: RevokeRoleCall) {
    this._call = call;
  }

  get role(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get account(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class RevokeRoleCall__Outputs {
  _call: RevokeRoleCall;

  constructor(call: RevokeRoleCall) {
    this._call = call;
  }
}

export class SafeBatchTransferFromCall extends ethereum.Call {
  get inputs(): SafeBatchTransferFromCall__Inputs {
    return new SafeBatchTransferFromCall__Inputs(this);
  }

  get outputs(): SafeBatchTransferFromCall__Outputs {
    return new SafeBatchTransferFromCall__Outputs(this);
  }
}

export class SafeBatchTransferFromCall__Inputs {
  _call: SafeBatchTransferFromCall;

  constructor(call: SafeBatchTransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get ids(): Array<BigInt> {
    return this._call.inputValues[2].value.toBigIntArray();
  }

  get amounts(): Array<BigInt> {
    return this._call.inputValues[3].value.toBigIntArray();
  }

  get data(): Bytes {
    return this._call.inputValues[4].value.toBytes();
  }
}

export class SafeBatchTransferFromCall__Outputs {
  _call: SafeBatchTransferFromCall;

  constructor(call: SafeBatchTransferFromCall) {
    this._call = call;
  }
}

export class SafeTransferFromCall extends ethereum.Call {
  get inputs(): SafeTransferFromCall__Inputs {
    return new SafeTransferFromCall__Inputs(this);
  }

  get outputs(): SafeTransferFromCall__Outputs {
    return new SafeTransferFromCall__Outputs(this);
  }
}

export class SafeTransferFromCall__Inputs {
  _call: SafeTransferFromCall;

  constructor(call: SafeTransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get id(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get amount(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get data(): Bytes {
    return this._call.inputValues[4].value.toBytes();
  }
}

export class SafeTransferFromCall__Outputs {
  _call: SafeTransferFromCall;

  constructor(call: SafeTransferFromCall) {
    this._call = call;
  }
}

export class SetApprovalForAllCall extends ethereum.Call {
  get inputs(): SetApprovalForAllCall__Inputs {
    return new SetApprovalForAllCall__Inputs(this);
  }

  get outputs(): SetApprovalForAllCall__Outputs {
    return new SetApprovalForAllCall__Outputs(this);
  }
}

export class SetApprovalForAllCall__Inputs {
  _call: SetApprovalForAllCall;

  constructor(call: SetApprovalForAllCall) {
    this._call = call;
  }

  get operator(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get approved(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class SetApprovalForAllCall__Outputs {
  _call: SetApprovalForAllCall;

  constructor(call: SetApprovalForAllCall) {
    this._call = call;
  }
}

export class SetContractURICall extends ethereum.Call {
  get inputs(): SetContractURICall__Inputs {
    return new SetContractURICall__Inputs(this);
  }

  get outputs(): SetContractURICall__Outputs {
    return new SetContractURICall__Outputs(this);
  }
}

export class SetContractURICall__Inputs {
  _call: SetContractURICall;

  constructor(call: SetContractURICall) {
    this._call = call;
  }

  get _uri(): string {
    return this._call.inputValues[0].value.toString();
  }
}

export class SetContractURICall__Outputs {
  _call: SetContractURICall;

  constructor(call: SetContractURICall) {
    this._call = call;
  }
}

export class SetDefaultRoyaltyInfoCall extends ethereum.Call {
  get inputs(): SetDefaultRoyaltyInfoCall__Inputs {
    return new SetDefaultRoyaltyInfoCall__Inputs(this);
  }

  get outputs(): SetDefaultRoyaltyInfoCall__Outputs {
    return new SetDefaultRoyaltyInfoCall__Outputs(this);
  }
}

export class SetDefaultRoyaltyInfoCall__Inputs {
  _call: SetDefaultRoyaltyInfoCall;

  constructor(call: SetDefaultRoyaltyInfoCall) {
    this._call = call;
  }

  get _royaltyRecipient(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _royaltyBps(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class SetDefaultRoyaltyInfoCall__Outputs {
  _call: SetDefaultRoyaltyInfoCall;

  constructor(call: SetDefaultRoyaltyInfoCall) {
    this._call = call;
  }
}

export class SetOwnerCall extends ethereum.Call {
  get inputs(): SetOwnerCall__Inputs {
    return new SetOwnerCall__Inputs(this);
  }

  get outputs(): SetOwnerCall__Outputs {
    return new SetOwnerCall__Outputs(this);
  }
}

export class SetOwnerCall__Inputs {
  _call: SetOwnerCall;

  constructor(call: SetOwnerCall) {
    this._call = call;
  }

  get _newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetOwnerCall__Outputs {
  _call: SetOwnerCall;

  constructor(call: SetOwnerCall) {
    this._call = call;
  }
}

export class SetPlatformFeeInfoCall extends ethereum.Call {
  get inputs(): SetPlatformFeeInfoCall__Inputs {
    return new SetPlatformFeeInfoCall__Inputs(this);
  }

  get outputs(): SetPlatformFeeInfoCall__Outputs {
    return new SetPlatformFeeInfoCall__Outputs(this);
  }
}

export class SetPlatformFeeInfoCall__Inputs {
  _call: SetPlatformFeeInfoCall;

  constructor(call: SetPlatformFeeInfoCall) {
    this._call = call;
  }

  get _platformFeeRecipient(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _platformFeeBps(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class SetPlatformFeeInfoCall__Outputs {
  _call: SetPlatformFeeInfoCall;

  constructor(call: SetPlatformFeeInfoCall) {
    this._call = call;
  }
}

export class SetPrimarySaleRecipientCall extends ethereum.Call {
  get inputs(): SetPrimarySaleRecipientCall__Inputs {
    return new SetPrimarySaleRecipientCall__Inputs(this);
  }

  get outputs(): SetPrimarySaleRecipientCall__Outputs {
    return new SetPrimarySaleRecipientCall__Outputs(this);
  }
}

export class SetPrimarySaleRecipientCall__Inputs {
  _call: SetPrimarySaleRecipientCall;

  constructor(call: SetPrimarySaleRecipientCall) {
    this._call = call;
  }

  get _saleRecipient(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetPrimarySaleRecipientCall__Outputs {
  _call: SetPrimarySaleRecipientCall;

  constructor(call: SetPrimarySaleRecipientCall) {
    this._call = call;
  }
}

export class SetRoyaltyInfoForTokenCall extends ethereum.Call {
  get inputs(): SetRoyaltyInfoForTokenCall__Inputs {
    return new SetRoyaltyInfoForTokenCall__Inputs(this);
  }

  get outputs(): SetRoyaltyInfoForTokenCall__Outputs {
    return new SetRoyaltyInfoForTokenCall__Outputs(this);
  }
}

export class SetRoyaltyInfoForTokenCall__Inputs {
  _call: SetRoyaltyInfoForTokenCall;

  constructor(call: SetRoyaltyInfoForTokenCall) {
    this._call = call;
  }

  get _tokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _recipient(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _bps(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class SetRoyaltyInfoForTokenCall__Outputs {
  _call: SetRoyaltyInfoForTokenCall;

  constructor(call: SetRoyaltyInfoForTokenCall) {
    this._call = call;
  }
}
