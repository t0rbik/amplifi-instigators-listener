type ApprovalForAll @entity(immutable: true) {
  id: Bytes!
  account: Bytes! # address
  operator: Bytes! # address
  approved: Boolean! # bool
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type DefaultRoyalty @entity(immutable: true) {
  id: Bytes!
  newRoyaltyRecipient: Bytes! # address
  newRoyaltyBps: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type OwnerUpdated @entity(immutable: true) {
  id: Bytes!
  prevOwner: Bytes! # address
  newOwner: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type PlatformFeeInfoUpdated @entity(immutable: true) {
  id: Bytes!
  platformFeeRecipient: Bytes! # address
  platformFeeBps: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type PrimarySaleRecipientUpdated @entity(immutable: true) {
  id: Bytes!
  recipient: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type RoleAdminChanged @entity(immutable: true) {
  id: Bytes!
  role: Bytes! # bytes32
  previousAdminRole: Bytes! # bytes32
  newAdminRole: Bytes! # bytes32
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type RoleGranted @entity(immutable: true) {
  id: Bytes!
  role: Bytes! # bytes32
  account: Bytes! # address
  sender: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type RoleRevoked @entity(immutable: true) {
  id: Bytes!
  role: Bytes! # bytes32
  account: Bytes! # address
  sender: Bytes! # address
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type RoyaltyForToken @entity(immutable: true) {
  id: Bytes!
  tokenId: BigInt! # uint256
  royaltyRecipient: Bytes! # address
  royaltyBps: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type TokensMinted @entity(immutable: true) {
  id: Bytes!
  mintedTo: Bytes! # address
  tokenIdMinted: BigInt! # uint256
  uri: String! # string
  quantityMinted: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type TokensMintedWithSignature @entity(immutable: true) {
  id: Bytes!
  signer: Bytes! # address
  mintedTo: Bytes! # address
  tokenIdMinted: BigInt! # uint256
  mintRequest_to: Bytes! # address
  mintRequest_royaltyRecipient: Bytes! # address
  mintRequest_royaltyBps: BigInt! # uint256
  mintRequest_primarySaleRecipient: Bytes! # address
  mintRequest_tokenId: BigInt! # uint256
  mintRequest_uri: String! # string
  mintRequest_quantity: BigInt! # uint256
  mintRequest_pricePerToken: BigInt! # uint256
  mintRequest_currency: Bytes! # address
  mintRequest_validityStartTimestamp: BigInt! # uint128
  mintRequest_validityEndTimestamp: BigInt! # uint128
  mintRequest_uid: Bytes! # bytes32
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type TransferBatch @entity(immutable: true) {
  id: Bytes!
  operator: Bytes! # address
  from: Bytes! # address
  to: Bytes! # address
  ids: [BigInt]! # uint256[]
  values: [BigInt]! # uint256[]
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type TransferSingle @entity(immutable: true) {
  id: Bytes!
  operator: Bytes! # address
  from: Bytes! # address
  to: Bytes! # address
  id: BigInt! # uint256
  value: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type URI @entity(immutable: true) {
  id: Bytes!
  value: String! # string
  id: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}
